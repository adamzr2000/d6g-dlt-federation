# version: '3'
x-common-commands:
  node_entrypoint: &node_entrypoint >
    bash -c "
    ./start_node.sh
    "
services:
  bootnode:
    image: blockchain-node:geth-poa
    container_name: bootnode
    hostname: bootnode
    environment:
      - IDENTITY=bootnode
      - BOOTNODE_PORT=${BOOTNODE_PORT}
    command: *node_entrypoint
    volumes:
      - "./config:/src/"    
    networks:
      blockchain_network:
        ipv4_address: ${BOOTNODE_IP}
    restart: always

  node1:
    image: blockchain-node:geth-poa
    container_name: node1
    hostname: node1
    depends_on:
      - bootnode
    environment:
      - IDENTITY=node1
      - ETHERBASE=${ETHERBASE_NODE_1}
      - JSONRPC_TRANSPORT=${JSONRPC_TRANSPORT}
      - BOOTNODE_IP=bootnode
      - BOOTNODE_PORT=${BOOTNODE_PORT}
      - NETWORK_ID=${NETWORK_ID}
      - ETH_NETSTATS_SECRET=${ETH_NETSTATS_SECRET}
      - ETH_NETSTATS_IP=eth-netstats
      - ETH_NETSTATS_PORT=${ETH_NETSTATS_PORT}
    command: *node_entrypoint
    ports:
      - "8545:8545"      # JSRONRPC_PORT
    volumes:
      - "./config:/src/"
    networks:
      blockchain_network:
        ipv4_address: ${IP_NODE_1}
    restart: always

  node2:
    image: blockchain-node:geth-poa
    container_name: node2
    hostname: node2
    depends_on:
      - bootnode
    environment:
      - IDENTITY=node2
      - ETHERBASE=${ETHERBASE_NODE_2}
      - JSONRPC_TRANSPORT=${JSONRPC_TRANSPORT}
      - BOOTNODE_IP=bootnode
      - BOOTNODE_PORT=${BOOTNODE_PORT}
      - NETWORK_ID=${NETWORK_ID}
      - ETH_NETSTATS_SECRET=${ETH_NETSTATS_SECRET}
      - ETH_NETSTATS_IP=eth-netstats
      - ETH_NETSTATS_PORT=${ETH_NETSTATS_PORT}
    command: *node_entrypoint
    ports:
      - "8546:8545"      # JSRONRPC_PORT
    volumes:
      - "./config:/src/"
    networks:
      blockchain_network:
        ipv4_address: ${IP_NODE_2}
    restart: always

  node3:
    image: blockchain-node:geth-poa
    container_name: node3
    hostname: node3
    depends_on:
      - bootnode
    environment:
      - IDENTITY=node3
      - ETHERBASE=${ETHERBASE_NODE_3}
      - JSONRPC_TRANSPORT=${JSONRPC_TRANSPORT}
      - BOOTNODE_IP=bootnode
      - BOOTNODE_PORT=${BOOTNODE_PORT}
      - NETWORK_ID=${NETWORK_ID}
      - ETH_NETSTATS_SECRET=${ETH_NETSTATS_SECRET}
      - ETH_NETSTATS_IP=eth-netstats
      - ETH_NETSTATS_PORT=${ETH_NETSTATS_PORT}
    command: *node_entrypoint
    ports:
      - "8547:8545"      # JSRONRPC_PORT
    volumes:
      - "./config:/src/"
    networks:
      blockchain_network:
        ipv4_address: ${IP_NODE_3}
    restart: always

  eth-netstats:
    image: eth-netstats
    container_name: eth-netstats
    depends_on:
      - node1
    ports:
      - "${ETH_NETSTATS_PORT}:${ETH_NETSTATS_PORT}"
    networks:
      blockchain_network:
        ipv4_address: ${ETH_NETSTATS_IP}
    restart: always

  blockscoutpostgres:
    image: postgres:13-alpine
    container_name: blockscoutpostgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    # volumes:
    #   - blockscoutpostgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      blockchain_network:
        ipv4_address: ${BLOCKSCOUT_POSTGRES_IP}

  blockscout:
    image: consensys/blockscout:v4.1.5-beta
    container_name: blockscout
    depends_on:
      - blockscoutpostgres
    environment:
      PORT: "4000"
      ECTO_USE_SSL: "false"
      DATABASE_URL: "postgresql://postgres:postgres@blockscoutpostgres:5432/postgres?ssl=false"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"

      # ---- Chain metadata ----
      NETWORK: "D6G Private Blockchain"
      SUBNETWORK: "Clique PoA"
      CHAIN_ID: "1337"
      COIN: "ETH"

      # ---- JSON-RPC wiring to your node1 ----
      ETHEREUM_JSONRPC_VARIANT: "geth"
      ETHEREUM_JSONRPC_TRANSPORT: "http"
      ETHEREUM_JSONRPC_HTTP_URL: "http://node1:8545"
      ETHEREUM_JSONRPC_TRACE_URL: "http://node1:8545"

    entrypoint: ["/bin/sh","-c","cd /opt/app/; echo  && mix do ecto.create, ecto.migrate; mix phx.server;"]
    ports:
      - "26000:4000"
    networks:
      blockchain_network:
        ipv4_address: ${BLOCKSCOUT_IP}

networks:
  blockchain_network:
    name: blockchain_network
    ipam:
      driver: default
      config:
        - subnet: ${BLOCKCHAIN_SUBNET}
